razor
@using ElectricalEngineering.Data.Data
@using ElectricalEngineering.Domain.Feeder

<!-- Button to add a new electrical consumer -->
<div align="center">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" VerticalAlign="true">
        <MudButton StartIcon="@Icons.Material.Filled.NoteAdd">Add Electrical Consumer</MudButton>
    </MudButtonGroup>
</div>

<!-- Header for the list of consumers -->
<MudText Typo="Typo.h6">List of Electrical Consumers</MudText>

<!-- DataGrid to display the list of consumers -->
@{
}
<MudDataGrid T="BaseConsumer"
             Items="@Elements"
             ReadOnly="@_isReadOnly"
             EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
             StartedEditingItem="@HandleStartedEditingItem"
             CanceledEditingItem="@HandleCanceledEditingItem"
             CommittedItemChanges="@HandleCommittedItemChanges"
             QuickFilter="@_quickFilter"
             Bordered="true"
             Dense="true"
             EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
             bind-SelectedItem="selectConsumer"
             >
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <!-- Template column for edit button -->
        <TemplateColumn Hidden="@(_isCellEditMode || _isReadOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
            </CellTemplate>
        </TemplateColumn>
        <!-- Property columns for consumer data -->
        <PropertyColumn Property="x => x.TechnologicalNumber" Title="Name" IsEditable="false" StickyLeft="true"/>
        <PropertyColumn Property="x => x.RatedElectricPower" Title="Power, kW"/>
        <PropertyColumn Property="x => x.PowerFactor" Title="Power Factor"/>
    </Columns>
</MudDataGrid>

@code {
    [Parameter]
    public FakeDataBase? Data { get; set; }

    private EventCallback<FakeDataBase> _dataChangedEventCallback;

    [Parameter]
    public EventCallback<FakeDataBase> DataChanged
    {
        get => _dataChangedEventCallback;
        set { _dataChangedEventCallback = value; }
    }

    protected override void OnInitialized()
    {
        _dataChangedEventCallback = EventCallback.Factory.Create<FakeDataBase>(this, DataChangedAsync);
    }

    private Task DataChangedAsync(FakeDataBase data)
    {
// Handle the DataChanged event
        return Task.CompletedTask;
    }
    
    private BaseConsumer? selectConsumer;
    private List<BaseConsumer> Elements = FakeDataBase.Consumers;
    private bool _isReadOnly;
    private bool _isCellEditMode;
    private List<string> _eventLog = new();
    private const bool _editTriggerRowClick = false;
    private string _searchString;

// Event handlers
    void HandleStartedEditingItem(BaseConsumer item)
    {
        _eventLog.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void HandleCanceledEditingItem(BaseConsumer item)
    {
        _eventLog.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void HandleCommittedItemChanges(BaseConsumer item)
    {
        _eventLog.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

// Quick filter function
    private Func<BaseConsumer, bool> _quickFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (x.TechnologicalNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (x.MechanismName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        };
}