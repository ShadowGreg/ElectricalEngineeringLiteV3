@page "/"
@using ElectricalEngineering.BlazorUi.Services
@using ElectricalEngineering.BlazorUI.Components.MainWindowComponents;
@using ElectricalEngineering.Data.Data
@using ElectricalEngineering.Domain.Feeder

@inject ISnackbar Snackbar

@inject BaseConsumerService BaseConsumerService

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" Class="upWin">
        <UpWindow/>
    </MudItem>
    <MudItem xs="3" Class="leftWin">
        <LeftWindow @bind-Data="_fakeDataBase" @bind-SelectedObject ="_selectConsumer"/>
    </MudItem>
    <MudItem xs="6" Class="centerWin">
        <СenterWindow @bind-Data="_fakeDataBase"/>
    </MudItem>
    <MudItem xs="3" Class="rightWin">
        <RightWindow @bind-Data="_fakeDataBase" @bind-SelectedObject ="_selectConsumer"/>
    </MudItem>
</MudGrid>

@code {
    private BaseConsumer? _selectConsumer;
    private FakeDataBase? _fakeDataBase;
    private void OnClick(MouseEventArgs args) => Snackbar.Add("OnClick Invoked");
    private void OnTouch(TouchEventArgs args) => Snackbar.Add("OnTouch Invoked");

    private string centeredStyle = "display: flex; justify-content: center;";

    private void ButtonClicked()
    {
        // Действия при нажатии на кнопку
        // Например, вывод сообщения об успешном клике
        Console.WriteLine("Кнопка была нажата!");
    }

    protected override Task OnInitializedAsync()
    {
        _fakeDataBase = new FakeDataBase();
        return base.OnInitializedAsync();
    }

}

@* @{ *@
@*     System.Diagnostics.Debug.Assert(_consumers != null, nameof(_consumers) + " != null"); *@
@* } *@
@* <MudDataGrid Items="@_consumers.Take(4)"> *@
@*     <Columns> *@
@*         <PropertyColumn Property="x => x.Name" Title="Технологическое наименование"/> *@
@*         <PropertyColumn Property="x => x.RatedElectricPower" Title="Мощность, кВт"/> *@
@*         <PropertyColumn Property="x => x.PowerFactor" Title="cos fi"/> *@
@*     </Columns> *@
@* </MudDataGrid> *@
@* *@
@* *@
@* @code { *@
@*     private List<BaseConsumer>? _consumers; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         // await base.OnInitializedAsync(); *@
@*         // await DbContext.Database.EnsureCreatedAsync(); *@
@*         // _consumers = await DbContext.Consumers.ToListAsync(); *@
@*         _consumers = (List<BaseConsumer>?)await BaseConsumerService.GetAllConsumersAsync(); *@
@*     } *@
@* *@
@* } *@