// <auto-generated />
using ElectricalEngineering.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectricalEngineering.Data.Entities
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("ElectricalEngineering.Domain.BaseBusbar", b =>
                {
                    b.Property<string>("SelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseElectricalPanelSelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusbarName")
                        .HasColumnType("TEXT");

                    b.Property<double>("EmergencyСurrentInputSwitch")
                        .HasColumnType("REAL");

                    b.Property<double>("EmergencyСurrentSectionalSwitch")
                        .HasColumnType("REAL");

                    b.Property<string>("InputSwitchSelfId")
                        .HasColumnType("TEXT");

                    b.Property<double>("InstalledCapacity")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<double>("PowerFactor")
                        .HasColumnType("REAL");

                    b.Property<double>("RatedCapacity")
                        .HasColumnType("REAL");

                    b.Property<double>("RatedCurrent")
                        .HasColumnType("REAL");

                    b.Property<string>("SectionalCircuitBreakerSelfId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SequentialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ShortCircuitCurrent")
                        .HasColumnType("REAL");

                    b.HasKey("SelfId");

                    b.HasIndex("BaseElectricalPanelSelfId");

                    b.HasIndex("InputSwitchSelfId");

                    b.HasIndex("SectionalCircuitBreakerSelfId");

                    b.ToTable("BaseBusbars");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.Feeder.BaseCable", b =>
                {
                    b.Property<string>("SelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CableBrand")
                        .HasColumnType("TEXT");

                    b.Property<double>("CableCrossSection")
                        .HasColumnType("REAL");

                    b.Property<double>("CableCurrent")
                        .HasColumnType("REAL");

                    b.Property<double>("CableLength")
                        .HasColumnType("REAL");

                    b.Property<int>("CableMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CableName")
                        .HasColumnType("TEXT");

                    b.Property<double>("CableVoltageLoss")
                        .HasColumnType("REAL");

                    b.Property<int>("CoresNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaxCableCurrent")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberInFeeder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SequentialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ShortCircuitCurrent")
                        .HasColumnType("REAL");

                    b.HasKey("SelfId");

                    b.ToTable("BaseCables");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.Feeder.BaseCircuitBreaker", b =>
                {
                    b.Property<string>("SelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimensions")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameOnBus")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberPoles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<double>("RatedCurrent")
                        .HasColumnType("REAL");

                    b.Property<string>("ResponseCurve")
                        .HasColumnType("TEXT");

                    b.Property<int>("SequentialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SwitchingCapacity")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("SelfId");

                    b.ToTable("CircuitBreakers");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.Feeder.BaseConsumer", b =>
                {
                    b.Property<string>("SelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassificationEquipmentInstallation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<double>("EfficiencyFactor")
                        .HasColumnType("REAL");

                    b.Property<int>("HoursWorkedPerYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoadType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationEquipmentInstallation")
                        .HasColumnType("TEXT");

                    b.Property<string>("MechanismName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberElectricalReceivers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PowerFactor")
                        .HasColumnType("REAL");

                    b.Property<double>("RatedCurrent")
                        .HasColumnType("REAL");

                    b.Property<double>("RatedElectricPower")
                        .HasColumnType("REAL");

                    b.Property<double>("RatedPowerSquared")
                        .HasColumnType("REAL");

                    b.Property<double>("ReactivePower")
                        .HasColumnType("REAL");

                    b.Property<int>("SequentialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StartingCurrent")
                        .HasColumnType("REAL");

                    b.Property<double>("StartingCurrentMultiplicity")
                        .HasColumnType("REAL");

                    b.Property<double>("TanPowerFactor")
                        .HasColumnType("REAL");

                    b.Property<string>("TechnologicalNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeGroundingSystem")
                        .HasColumnType("TEXT");

                    b.Property<double>("UsageFactor")
                        .HasColumnType("REAL");

                    b.Property<double>("Voltage")
                        .HasColumnType("REAL");

                    b.HasKey("SelfId");

                    b.ToTable("Consumers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseConsumer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.Feeder.BaseFeeder", b =>
                {
                    b.Property<string>("SelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseBusbarSelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CableSelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CircuitBreakerSelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumerSelfId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SequentialNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("SelfId");

                    b.HasIndex("BaseBusbarSelfId");

                    b.HasIndex("CableSelfId");

                    b.HasIndex("CircuitBreakerSelfId");

                    b.HasIndex("ConsumerSelfId");

                    b.ToTable("BaseFeeders");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.BaseElectricalPanel", b =>
                {
                    b.HasBaseType("ElectricalEngineering.Domain.Feeder.BaseConsumer");

                    b.Property<double>("AverageDesignReactivePower")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageRatedActivePower")
                        .HasColumnType("REAL");

                    b.Property<double>("DesignLoadFactor")
                        .HasColumnType("REAL");

                    b.Property<double>("EquivalentNumberOfElectricalReceiversOfTheShield")
                        .HasColumnType("REAL");

                    b.Property<double>("InstalledElectricalPowerOfTheSwitchboard")
                        .HasColumnType("REAL");

                    b.Property<double>("NumberOfElectricalReceiversInstalledInTheSwitchboard")
                        .HasColumnType("REAL");

                    b.Property<double>("ReactivePowerOfThePanel")
                        .HasColumnType("REAL");

                    b.Property<double>("ShieldActivePower")
                        .HasColumnType("REAL");

                    b.Property<double>("ShieldPowerFactor")
                        .HasColumnType("REAL");

                    b.Property<double>("ShieldUtilizationFactor")
                        .HasColumnType("REAL");

                    b.Property<double>("SquareOfTheRatedPowerOfThePanel")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalPower")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("BaseElectricalPanel");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.BaseBusbar", b =>
                {
                    b.HasOne("ElectricalEngineering.Domain.BaseElectricalPanel", null)
                        .WithMany("BusBars")
                        .HasForeignKey("BaseElectricalPanelSelfId");

                    b.HasOne("ElectricalEngineering.Domain.Feeder.BaseCircuitBreaker", "InputSwitch")
                        .WithMany()
                        .HasForeignKey("InputSwitchSelfId");

                    b.HasOne("ElectricalEngineering.Domain.Feeder.BaseCircuitBreaker", "SectionalCircuitBreaker")
                        .WithMany()
                        .HasForeignKey("SectionalCircuitBreakerSelfId");

                    b.Navigation("InputSwitch");

                    b.Navigation("SectionalCircuitBreaker");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.Feeder.BaseFeeder", b =>
                {
                    b.HasOne("ElectricalEngineering.Domain.BaseBusbar", null)
                        .WithMany("Feeders")
                        .HasForeignKey("BaseBusbarSelfId");

                    b.HasOne("ElectricalEngineering.Domain.Feeder.BaseCable", "Cable")
                        .WithMany()
                        .HasForeignKey("CableSelfId");

                    b.HasOne("ElectricalEngineering.Domain.Feeder.BaseCircuitBreaker", "CircuitBreaker")
                        .WithMany()
                        .HasForeignKey("CircuitBreakerSelfId");

                    b.HasOne("ElectricalEngineering.Domain.Feeder.BaseConsumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerSelfId");

                    b.Navigation("Cable");

                    b.Navigation("CircuitBreaker");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.BaseBusbar", b =>
                {
                    b.Navigation("Feeders");
                });

            modelBuilder.Entity("ElectricalEngineering.Domain.BaseElectricalPanel", b =>
                {
                    b.Navigation("BusBars");
                });
#pragma warning restore 612, 618
        }
    }
}
